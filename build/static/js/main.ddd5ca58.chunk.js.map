{"version":3,"sources":["styles/chatlist.module.css","store/index.js","components/Message.js","components/ChatList.js","routes/index.js","utils/serviceWorker.js","index.js","constants/ActionTypes.js","reducers/counter.js","reducers/index.js","store/storeProd.js","styles/message.module.css"],"names":["module","exports","store","require","default","Message","props","myRef","useRef","useState","messages","setMessages","newMessage","setNewMessage","useEffect","msg","localStorage","getItem","name","JSON","parse","setItem","stringify","current","scrollIntoView","behavior","block","className","styles","chat_header","backimg","onClick","route","imgclick","src","alt","header_chat","data","map","message","chat_box","key","id","time","chat_text","content","author","result","ref","type","value","onChange","event","target","onKeyPress","date","Date","trim","length","toTimeString","slice","ChatList","chats","setChats","toggle","setToggle","users","lastMessage","info","undefined","lastMessageTime","checked","CreateInput","user","setUser","create_chat","addUser","chatlist_header","menu_btn","header_messenger","finder_btn","findPic","names","user_box","avatar","chatContainer","indicatorCont","indicator","btn_chat","Container","styled","div","history","createBrowserHistory","Routes","openChat","component","setComponent","closeChat","Boolean","window","location","hostname","match","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","INCREMENT_COUNTER","DECREMENT_COUNTER","initialState","rootReducer","combineReducers","counter","state","ActionTypes","middlewares","ReduxThunk","enhancer","applyMiddleware","configureStore","createStore"],"mappings":"iJACAA,EAAOC,QAAU,CAAC,SAAW,2BAA2B,YAAc,8BAA8B,SAAW,2BAA2B,SAAW,2BAA2B,aAAe,+BAA+B,OAAS,yBAAyB,cAAgB,gCAAgC,cAAgB,gCAAgC,YAAc,8BAA8B,IAAM,sBAAsB,KAAO,uBAAuB,UAAY,4BAA4B,gBAAkB,kCAAkC,SAAW,2BAA2B,iBAAmB,mCAAmC,WAAa,6BAA6B,QAAU,0BAA0B,SAAW,2BAA2B,YAAc,8BAA8B,UAAY,4BAA4B,SAAW,2BAA2B,MAAQ,0B,uBCDn2BC,EACdC,EAAQ,IADHC,QAKRJ,EAAOC,QAAUC,K,mNCGF,SAASG,EAAQC,GAC/B,IAAMC,EAAQC,iBAAO,MADiB,EAGNC,mBAAS,IAHH,mBAG/BC,EAH+B,KAGrBC,EAHqB,OAIFF,mBAAS,IAJP,mBAI/BG,EAJ+B,KAInBC,EAJmB,KAOtCC,qBAAU,WACT,IAAMC,EAAMC,aAAaC,QAAQX,EAAMY,OAAS,KAChDP,EAAYQ,KAAKC,MAAML,MACrB,CAACT,EAAMY,OAGVJ,qBAAU,WACTE,aAAaK,QAAQf,EAAMY,KAAMC,KAAKG,UAAUZ,MAC9C,CAACA,EAAUJ,EAAMY,OAsBpBJ,qBAJuB,WACtBP,EAAMgB,QAAQC,eAAe,CAAEC,SAAU,SAAUC,MAAO,UAGjC,CAAChB,IAoB3B,OACC,6BACC,yBAAKiB,UAAWC,IAAOC,aACtB,yBAAKF,UAAWC,IAAOE,SACtB,yBAAKC,QAASzB,EAAM0B,MAAOL,UAAWC,IAAOK,SAAUC,IAAI,iGAAiGC,IAAI,UAEjK,uBAAGR,UAAWC,IAAOQ,aAAc9B,EAAMY,OAE1C,mBA/CF,SAAqBZ,GACpB,GAAuB,OAAnBA,EAAMI,SAAmB,CAC5B,IAAM2B,EAAO/B,EAAMI,SAAS4B,KAAI,SAACC,GAAD,OAC/B,yBAAKZ,UAAWC,IAAOY,SAAUC,IAAKF,EAAQG,IAC7C,8BAAOH,EAAQI,MACf,uBAAGhB,UAAWC,IAAOgB,WAAYL,EAAQM,SACzC,8BAAON,EAAQO,YAGjB,OACC,yBAAKnB,UAAWC,IAAOmB,OAAQC,IAAOzC,GAAtC,IAAgD8B,EAAhD,QAqCD,CAAa3B,SAAYA,IACzB,2BACCuC,KAAK,OACLC,MAAStC,EACTuC,SAAU,SAAAC,GAAK,OAAIvC,EAAcuC,EAAMC,OAAOH,QAC9CI,WA/BgB,SAAAF,GAClB,GAAkB,UAAdA,EAAMX,IAAiB,CAC1B,IAAMc,EAAO,IAAIC,KACS,KAAtB5C,EAAW6C,SACd9C,EAAY,GAAD,mBACPD,GADO,CAEV,CACCgC,GAAIhC,EAASgD,OACbf,KAAMY,EAAKI,eAAeC,MAAM,EAAG,GACnCf,QAASjC,EACTkC,OAAQ,UAGVjC,EAAc,U,oBClDH,SAASgD,EAASvD,GAChC,IAAMC,EAAQC,iBAAO,MADkB,EAEbC,mBAAS,IAFI,mBAEhCqD,EAFgC,KAEzBC,EAFyB,OAGXtD,oBAAS,GAHE,mBAGhCuD,EAHgC,KAGxBC,EAHwB,KAKvCnD,qBAAU,WACT,IAAMoD,EAAQlD,aAAaC,QAAQ,UAAY,KAC/C8C,EAAS5C,KAAKC,MAAM8C,MAClB,IAEHpD,qBAAU,WACTE,aAAaK,QAAQ,QAASF,KAAKG,UAAUwC,MAC5C,CAACA,IAGH,IAgBMK,EAAc,SAACjD,GACpB,IAAMkD,EAAOpD,aAAaC,QAAQC,GAClC,MAAa,OAATkD,GAA0B,OAATA,QAA0BC,IAATD,EAC9BjD,KAAKC,MAAMgD,GAAMjD,KAAKC,MAAMgD,GAAMV,OAAS,GAAGb,QAE/C,MAGFyB,EAAkB,SAACpD,GACxB,IAAMkD,EAAOpD,aAAaC,QAAQC,GAClC,MAAa,OAATkD,GAA0B,OAATA,QAA0BC,IAATD,EAC9BjD,KAAKC,MAAMgD,GAAMjD,KAAKC,MAAMgD,GAAMV,OAAS,GAAGf,KAE/C,MAGF4B,EAAU,SAACrD,GAChB,IAAMkD,EAAOpD,aAAaC,QAAQC,GAClC,MAAa,OAATkD,GAA0B,OAATA,QAA0BC,IAATD,EAC9B,iEAED,MA6BR,IAeMI,EAAc,WAAO,IAAD,EACD/D,mBAAS,IADR,mBAClBgE,EADkB,KACZC,EADY,KAEzB,OACC,2BACC/C,UAAaC,IAAO+C,YACpB1B,KAAK,OACLC,MAASuB,EACTtB,SAAU,SAACC,GAAD,OAAWsB,EAAQtB,EAAMC,OAAOH,QAC1CI,WAAY,SAACF,IAvBA,SAACA,EAAOqB,GACL,UAAdrB,EAAMX,KACI,KAATgC,GACHV,EAAS,GAAD,mBACJD,GADI,CAEP,CACCpB,GAAIoB,EAAMJ,OACVxC,KAAMuD,MAgBgBG,CAAQxB,EAAOqB,EAAKhB,YA0B/C,OAFA3C,qBAJuB,WACtBP,EAAMgB,QAAQC,eAAe,CAAEC,SAAU,SAAUC,MAAO,UAGjC,CAACoC,IAG1B,6BACC,mBArHiB,WAClB,OACC,yBAAKnC,UAAWC,IAAOiD,iBACtB,yBAAKlD,UAAWC,IAAOkD,UACtB,yBAAK5C,IAAI,+DAA+DC,IAAI,UAE7E,yBAAKR,UAAWC,IAAOmD,kBACtB,yCAED,yBAAKpD,UAAWC,IAAOoD,YACtB,yBAAKrD,UAAWC,IAAOqD,QAAS/C,IAAI,sEAAsEC,IAAI,gBA2GhH,MACA,mBA9EF,SAAkB7B,GACjB,GAAoB,OAAhBA,EAAM4E,MAAgB,CACzB,IAAM7C,EAAO/B,EAAM4E,MAAM5C,KAAI,SAACmC,GAAD,OAC5B,yBAAK9C,UAAWC,IAAOuD,SAAU1C,IAAKgC,EAAK/B,GAC1CX,QAAW,kBAAMzB,EAAM0B,MAAMyC,EAAKvD,QAElC,yBAAKS,UAAWC,IAAOwD,QACtB,yBAAKjD,IAAI,OAAOD,IAAI,kEAErB,yBAAKP,UAAWC,IAAOyD,eACtB,uBAAG1D,UAAWC,IAAOC,aAAc4C,EAAKvD,MACxC,uBAAGS,UAAWC,IAAOb,KAAMoD,EAAYM,EAAKvD,QAE7C,yBAAKS,UAAWC,IAAO0D,eACtB,0BAAM3D,UAAWC,IAAOe,MAAO2B,EAAgBG,EAAKvD,OACpD,yBAAKS,UAAWC,IAAO2D,UAAWpD,IAAI,GAAGD,IAAKqC,EAAQE,EAAKvD,aAI9D,OACC,yBAAKS,UAAWC,IAAOlB,SAAUsC,IAAOzC,GAAxC,IAAiD8B,EAAjD,QA0DD,CAAU6C,MAASpB,EAAO9B,MAAO1B,EAAM0B,QACvC,mBArBmB,WACpB,OACC,6BACC,4BAAQiB,KAAK,SAAStB,UAAWC,IAAO4D,SAAUzD,QAAS,WAN7DkC,GAAWD,KAOR,yBAAK7B,IAAI,gEAAcD,IAAI,mEAE3B8B,EAAS,kBAACQ,EAAD,MAAkB,QAe7B,O,8FCzIH,IAAMiB,EAAYC,IAAOC,IAAV,KAGFC,EAAUC,cA0BRC,MAxBf,WAAmB,IAAD,EACiBrF,mBACjC,kBAACoD,EAAD,CAAU7B,MAAO,SAACd,GAAD,OAAU6E,EAAS7E,OAFpB,mBACV8E,EADU,KACCC,EADD,KAKXF,EAAW,SAAC7E,GACjB+E,EAAa,kBAAC5F,EAAD,CAAS2B,MAAO,kBAAMkE,KAAahF,KAAMA,MAGjDgF,EAAY,WACjBD,EAAa,kBAACpC,EAAD,CAAU7B,MAAO,SAACd,GAAD,OAAU6E,EAAS7E,QAElD,OACC,kBAAC,IAAD,CAAQ0E,QAASA,GAChB,kBAACH,EAAD,KACC,kBAAC,IAAD,KACEO,M,MChBcG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCTnCC,iBACC,kBAAC,IAAD,CAAUtG,MAAOA,KAChB,kBAAC,EAAD,OAEDuG,SAASC,eAAe,SD8GnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,iB,2DE5HJ,GAEdC,kBAAmB,oBACnBC,kBAAmB,qBCDdC,EAAe,ECCrB,IAIeC,EAJKC,YAAgB,CACnCC,QDAc,WAAgD,IAA/BC,EAA8B,uDAAtBJ,EACvC,QAD6D,wCAC9ClE,MACd,KAAKuE,EAAYP,kBAChB,OAAOM,EAAQ,EAChB,KAAKC,EAAYN,kBAChB,OAAOK,EAAQ,EAChB,QACC,OAAOA,MEXV,wCAIA,IAAME,EAAc,CAACC,KACfC,EAAW,CAACC,IAAe,WAAf,EAAmBH,IAEtB,SAASI,IAAmC,IAApBV,EAAmB,uDAAJ,GACrD,OAAOW,IAAW,WAAX,GAAYV,EAAaD,GAAzB,OAA0CQ,M,kBCPlD3H,EAAOC,QAAU,CAAC,YAAc,6BAA6B,QAAU,yBAAyB,YAAc,6BAA6B,OAAS,wBAAwB,SAAW,0BAA0B,SAAW,0BAA0B,UAAY,8B","file":"static/js/main.ddd5ca58.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages\":\"chatlist_messages__3fFJd\",\"create_chat\":\"chatlist_create_chat__1sHgt\",\"creating\":\"chatlist_creating__2296x\",\"user_box\":\"chatlist_user_box__3JS5V\",\"slidetoright\":\"chatlist_slidetoright__1CJll\",\"avatar\":\"chatlist_avatar__3hXwi\",\"chatContainer\":\"chatlist_chatContainer__2YOHS\",\"indicatorCont\":\"chatlist_indicatorCont__Qh5t-\",\"chat_header\":\"chatlist_chat_header__KzpUE\",\"msg\":\"chatlist_msg__3LQAl\",\"time\":\"chatlist_time__2LijT\",\"indicator\":\"chatlist_indicator__1MhLW\",\"chatlist_header\":\"chatlist_chatlist_header___YCcZ\",\"menu_btn\":\"chatlist_menu_btn__1wCpy\",\"header_messenger\":\"chatlist_header_messenger__3gk9B\",\"finder_btn\":\"chatlist_finder_btn__3z3Sc\",\"findPic\":\"chatlist_findPic__2iT9E\",\"closePic\":\"chatlist_closePic__3r-Ae\",\"text_holder\":\"chatlist_text_holder__2OzYc\",\"slideleft\":\"chatlist_slideleft__3FQRX\",\"btn_chat\":\"chatlist_btn_chat__1LHKT\",\"pulse\":\"chatlist_pulse__3Kt6E\"};","const { default: store } = process.env.NODE_ENV === 'production'\n\t? require('./storeProd')\n\t: require('./storeDev')\n\n// Exporting the store, then use it anywhere like store.getState() or store.dispatch()\nmodule.exports = store()","/* eslint-disable react/destructuring-assignment */\r\n/* eslint-disable jsx-a11y/click-events-have-key-events */\r\n/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\r\n/* eslint-disable no-shadow */\r\n/* eslint-disable react/prop-types */\r\nimport React, {useState, useEffect, useRef} from 'react';\r\nimport styles from '../styles/message.module.css';\r\n\r\nexport default function Message(props) {\r\n\tconst myRef = useRef(null)\r\n\r\n\tconst [messages, setMessages] = useState([]);\r\n\tconst [newMessage, setNewMessage] = useState('');\r\n\t\r\n\r\n\tuseEffect(() => {\r\n\t\tconst msg = localStorage.getItem(props.name) || \"[]\";\r\n\t\tsetMessages(JSON.parse(msg));\r\n\t}, [props.name]);\r\n\r\n\r\n\tuseEffect(() => {\r\n\t\tlocalStorage.setItem(props.name, JSON.stringify(messages));\r\n\t}, [messages, props.name]);\r\n \r\n\t\r\n\tfunction MessageList(props) {\r\n\t\tif (props.messages !== \"[]\") {\r\n\t\t\tconst data = props.messages.map((message) =>\r\n\t\t\t\t<div className={styles.chat_box} key={message.id}>\r\n\t\t\t\t\t<span>{message.time}</span>\r\n\t\t\t\t\t<p className={styles.chat_text}>{message.content}</p>\r\n\t\t\t\t\t<span>{message.author}</span>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t\treturn (\r\n\t\t\t\t<div className={styles.result} ref = {myRef} > {data} </div>\r\n\t\t\t);\r\n\t\t}\r\n\t};\r\n\r\n\tconst scrollToBottom = () => {\r\n\t\tmyRef.current.scrollIntoView({ behavior: \"smooth\", block: \"end\"});\r\n\t}\r\n\r\n\tuseEffect(scrollToBottom, [messages]);\r\n\r\n\tconst addMessage = event => {\r\n\t\tif (event.key === 'Enter') {\r\n\t\t\tconst date = new Date();\r\n\t\t\tif (newMessage.trim() !== '') {\r\n\t\t\t\tsetMessages([\r\n\t\t\t\t\t...messages,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tid: messages.length,\r\n\t\t\t\t\t\ttime: date.toTimeString().slice(0, 5),\r\n\t\t\t\t\t\tcontent: newMessage,\r\n\t\t\t\t\t\tauthor: \"you\"\r\n\t\t\t\t\t}\r\n\t\t\t\t])\r\n\t\t\t\tsetNewMessage('');\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\treturn ( \r\n\t\t<div>\r\n\t\t\t<div className={styles.chat_header}>\r\n\t\t\t\t<div className={styles.backimg}>\r\n\t\t\t\t\t<img onClick={props.route} className={styles.imgclick} src='http://s1.iconbird.com/ico/0612/GooglePlusInterfaceIcons/w128h1281338911640directionalleft.png' alt='back' />\r\n\t\t\t\t</div>\r\n\t\t\t\t<p className={styles.header_chat}>{props.name}</p>\r\n\t\t\t</div>\r\n\t\t\t<MessageList messages = {messages} /> \r\n\t\t\t<input\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tvalue = {newMessage}\r\n\t\t\t\tonChange={event => setNewMessage(event.target.value)}\r\n\t\t\t\tonKeyPress={addMessage}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t)\r\n}\r\n","/* eslint-disable react/destructuring-assignment */\r\n/* eslint-disable jsx-a11y/click-events-have-key-events */\r\n/* eslint-disable jsx-a11y/no-static-element-interactions */\r\n/* eslint-disable no-shadow */\r\n/* eslint-disable react/prop-types */\r\nimport React, {useState, useEffect, useRef} from 'react';\r\nimport styles from '../styles/chatlist.module.css';\r\n\r\n;\r\n\r\nexport default function ChatList(props) {\r\n\tconst myRef = useRef(null);\r\n\tconst [chats, setChats] = useState([]);\r\n\tconst [toggle, setToggle] = useState(false);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst users = localStorage.getItem('users') || \"[]\";\r\n\t\tsetChats(JSON.parse(users));\r\n\t}, []);\r\n\r\n\tuseEffect(() => {\r\n\t\tlocalStorage.setItem('users', JSON.stringify(chats))\r\n\t},[chats])\r\n\r\n\r\n\tconst ChatHeader = () => {\r\n\t\treturn (\r\n\t\t\t<div className={styles.chatlist_header}>\r\n\t\t\t\t<div className={styles.menu_btn}>\r\n\t\t\t\t\t<img src='http://s1.iconbird.com/ico/2013/3/636/w80h80139396727847.png' alt='menu'/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className={styles.header_messenger}>\r\n\t\t\t\t\t<p>Messenger</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className={styles.finder_btn}>\r\n\t\t\t\t\t<img className={styles.findPic} src='http://s1.iconbird.com/ico/2013/1/569/w24h24138981479606magnify.png' alt='FindBtn'/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t};\r\n\r\n\tconst lastMessage = (name) => {\r\n\t\tconst info = localStorage.getItem(name);\r\n\t\tif (info !== \"[]\" && info !== null && info !== undefined) {\r\n\t\t\treturn JSON.parse(info)[JSON.parse(info).length - 1].content\r\n\t\t} \r\n\t\treturn null\r\n\t};\r\n\r\n\tconst lastMessageTime = (name) => {\r\n\t\tconst info = localStorage.getItem(name);\r\n\t\tif (info !== \"[]\" && info !== null && info !== undefined) {\r\n\t\t\treturn JSON.parse(info)[JSON.parse(info).length - 1].time\r\n\t\t}\r\n\t\treturn null\r\n\t};\r\n\r\n\tconst checked = (name) => {\r\n\t\tconst info = localStorage.getItem(name);\r\n\t\tif (info !== \"[]\" && info !== null && info !== undefined) {\r\n\t\t\treturn 'http://s1.iconbird.com/ico/0912/fugue/w24h241349011565tick.png'\r\n\t\t}\r\n\t\treturn null\r\n\t};\r\n\r\n\tfunction UserList(props) {\r\n\t\tif (props.names !== \"[]\") {\r\n\t\t\tconst data = props.names.map((user) =>\r\n\t\t\t\t<div className={styles.user_box} key={user.id}\r\n\t\t\t\t\tonClick = {() => props.route(user.name)}\r\n\t\t\t\t>\r\n\t\t\t\t\t<div className={styles.avatar}>\r\n\t\t\t\t\t\t<img alt='User' src='http://s1.iconbird.com/ico/2013/3/636/w80h80139396728710.png'/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className={styles.chatContainer}>\r\n\t\t\t\t\t\t<p className={styles.chat_header}>{user.name}</p>\r\n\t\t\t\t\t\t<p className={styles.msg}>{lastMessage(user.name)}</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className={styles.indicatorCont}>\r\n\t\t\t\t\t\t<span className={styles.time}>{lastMessageTime(user.name)}</span>\r\n\t\t\t\t\t\t<img className={styles.indicator} alt='' src={checked(user.name)}/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t\treturn (\r\n\t\t\t\t<div className={styles.messages} ref = {myRef}> {data} </div>\r\n\t\t\t);\r\n\t\t}\r\n\t};\r\n\r\n    \r\n\tconst addUser = (event, user) => {\r\n\t\tif (event.key === 'Enter') {\r\n\t\t\tif (user !== '') {\r\n\t\t\t\tsetChats([\r\n\t\t\t\t\t...chats,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tid: chats.length,\r\n\t\t\t\t\t\tname: user\r\n\t\t\t\t\t}\r\n\t\t\t\t])\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\t\r\n    \r\n\tconst CreateInput = () => {\r\n\t\tconst [user, setUser] = useState('');\r\n\t\treturn (\r\n\t\t\t<input\r\n\t\t\t\tclassName = {styles.create_chat}\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tvalue = {user}\r\n\t\t\t\tonChange={(event) => setUser(event.target.value)}\r\n\t\t\t\tonKeyPress={(event) => {addUser(event, user.trim())}}\r\n\t\t\t/>\r\n\t\t) \r\n\t};   \r\n     \r\n\tfunction toggleBtn() {\r\n\t\tsetToggle(!toggle);\r\n\t}\r\n    \r\n\tconst CreateButton = () => {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<button type='button' className={styles.btn_chat} onClick={() => toggleBtn()}>\r\n\t\t\t\t\t<img alt='Создать чат' src='http://s1.iconbird.com/ico/0512/GlyphIcons/file1337170571.png'/>\r\n\t\t\t\t</button>\r\n\t\t\t\t{toggle ? <CreateInput /> : null}\r\n\t\t\t</div>\r\n\t\t)\r\n\t};\r\n\r\n\tconst scrollToBottom = () => {\r\n\t\tmyRef.current.scrollIntoView({ behavior: \"smooth\", block: \"end\"});\r\n\t}\r\n\r\n\tuseEffect(scrollToBottom, [chats]);\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<ChatHeader />\r\n\t\t\t<UserList names = {chats} route={props.route}/>\r\n\t\t\t<CreateButton />\r\n\t\t</div>\r\n\t)\r\n}\r\n","import React, {useState} from 'react'\nimport { Router, Route, Switch } from 'react-router-dom'\nimport { createBrowserHistory } from 'history'\nimport styled from '@emotion/styled'\nimport Message from '../components/Message'\nimport ChatList from '../components/ChatList'\n\nconst Container = styled.div`\n  text-align: center;\n`\nexport const history = createBrowserHistory()\n\nfunction Routes() {\n\tconst [component, setComponent] = useState(\n\t\t<ChatList route={(name) => openChat(name)} />,\n\t);\n\t\n\tconst openChat = (name) => {\n\t\tsetComponent(<Message route={() => closeChat()} name={name} />);\n\t};\n\t\n\tconst closeChat = () => {\n\t\tsetComponent(<ChatList route={(name) => openChat(name)} />);\n\t};\n\treturn (\n\t\t<Router history={history}>\n\t\t\t<Container>\n\t\t\t\t<Switch>\n\t\t\t\t\t{component}\n\t\t\t\t\t{/* <Route path=\"/\" component={CounterContainer} /> */}\n\t\t\t\t</Switch>\n\t\t\t</Container>\n\t\t</Router>\n\t)\n}\n\nexport default Routes\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport Routes from './routes'\nimport './styles/globalStyles.css'\nimport * as serviceWorker from './utils/serviceWorker'\n\nrender(\n\t<Provider store={store}>\n\t\t<Routes />\n\t</Provider>,\n\tdocument.getElementById('root'),\n)\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","export default {\n\t// Counter\n\tINCREMENT_COUNTER: 'INCREMENT_COUNTER',\n\tDECREMENT_COUNTER: 'DECREMENT_COUNTER',\n}\n","import ActionTypes from '../constants/ActionTypes'\n\nconst initialState = 0\n\nexport default function counter(state = initialState, action) {\n\tswitch (action.type) {\n\t\tcase ActionTypes.INCREMENT_COUNTER:\n\t\t\treturn state + 1\n\t\tcase ActionTypes.DECREMENT_COUNTER:\n\t\t\treturn state - 1\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n","import { combineReducers } from 'redux'\nimport counter from './counter'\n\nconst rootReducer = combineReducers({\n\tcounter,\n})\n\nexport default rootReducer\n","import { createStore, applyMiddleware } from 'redux'\nimport ReduxThunk from 'redux-thunk'\nimport rootReducer from '../reducers'\n\nconst middlewares = [ReduxThunk]\nconst enhancer = [applyMiddleware(...middlewares)]\n\nexport default function configureStore(initialState = {}) {\n\treturn createStore(rootReducer, initialState, ...enhancer)\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chat_header\":\"message_chat_header__3a6Zx\",\"backimg\":\"message_backimg__m06LQ\",\"header_chat\":\"message_header_chat__2c3g8\",\"result\":\"message_result__3FQMH\",\"imgclick\":\"message_imgclick__1riwE\",\"chat_box\":\"message_chat_box__Q_UDS\",\"chat_text\":\"message_chat_text__2IV00\"};"],"sourceRoot":""}